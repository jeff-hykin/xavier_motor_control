# 
# 
# warehouses (system packages come from warehouses)
# 
#
- (defaultWarehouse):
    saveVariableAs: "defaultWarehouse"
    createWarehouseFrom:
        tarFileUrl: "https://github.com/NixOS/nixpkgs/archive/472fc059560306eeea6834d5923930f1c3968724.tar.gz"
    arguments:
        config:
            allowUnfree: true
            cudaSupport: true
            # permittedInsecurePackages: [ "openssl-1.0.2u" ]

# Examples of extra warehouses:

# - (warehouse):
#     saveVariableAs: "sconsWarehouse"
#     createWarehouseFrom: 
#         tarFileUrl: "https://github.com/NixOS/nixpkgs/archive/05bbf675397d5366259409139039af8077d695ce.tar.gz"
#     arguments:
#         config: {}
    
# - (warehouse):
#     saveVariableAs: "warehouseWithNcclCudaToolkit_11_2"
#     createWarehouseFrom: { tarFileUrl: "https://github.com/NixOS/nixpkgs/archive/2cdd608fab0af07647da29634627a42852a8c97f.tar.gz" }
#     arguments:
#         config: {}
        
# - (warehouse):
#     saveVariableAs: "warehouseForNetworking"
#     createWarehouseFrom: { nixCommitHash: "c00039f697caa02208a01e7712bfe11c484cceca" }
#     arguments:
#         config: {}


# 
# 
# compute values (which are then used for hardware-specific packages)
# 
#

# # example1.1: using command line, the stdout of the command is parsed as aÂ JSON value before being put into a variable
# - (compute):
#     runCommand: [ "python", "-c", "from sys import platform;import json;print(json.dumps(platform == 'darwin'))" ]
#     withPackages: [ "python" ]
#     fromWarehouse: !!var defaultWarehouse
#     saveVariableAs: isMac

# # example2: same outcome as example1, but using javascript (deno)
# #           this approach is about 1000ms faster than the cli-approach above because 
# #           the deno runtime is already instantiated (the deno runtime is parsing this file)
# - (compute): 
#     value: !!deno " Deno.build.os == 'darwin' "
#     saveVariableAs: isMac

# # example3: create an isArm64 variable
#     runCommand: [ "zsh", "-c", "if [ $(arch) = 'arm64' ]; then echo 'true'; else echo 'false'; fi" ]
#     withPackages: [ "python" ]
#     fromWarehouse: !!var defaultWarehouse
#     saveVariableAs: isArm64

# # example4: create an isLinux variable
# - (compute):
#     saveVariableAs: isLinux
#     value: !!deno |
#         Deno.build.os == 'linux'

# # example5: create an isUbuntu variable
# - (compute):
#     saveVariableAs: isUbuntu
#     value: !!deno |
#         await Deno.readTextFile("/etc/os-release").catch(_=>false).then(text=>!!text.match(/ubuntu/i))

# # example6: create an isRaspbian variable
# - (compute):
#     saveVariableAs: isRaspbian
#     value: !!deno |
#         await Deno.readTextFile("/etc/os-release").catch(_=>false).then(text=>!!text.match(/raspbian/i))

# available tags:
    # !!var               # marks that a string will be intepreted as a variable name, and the value of the variable will be used
    # !!deno              # a string that will be evaluated in a deno runtime and replaced with the output
    # !!nix               # the system_tools.yaml is converted to a shell.nix file, this tag indicates that a string to be transfered directly/literally to that file
    # !!as_absolute_path  # useful for PATH, PYTHONPATH, and the like: converts a path (relative to this file) into a string that is an absolute-path

# 
# 
# env vars
# 
# 

# - (environmentVariable):
#     envVar: HOWDY
#     overwriteAs: "Howdy"

# - (environmentVariable):
#     envVar: PATH
#     prepend: !!as_absolute_path "./home" # the "." is the folder containing the system_tools.yaml file
#     joinUsing: ":"

# 
# 
# 
# packages
# 
# 
# 


# 
# core
# 
- (integrate):
    package: [ "deno",]
    from: "472fc059560306eeea6834d5923930f1c3968724" # a commit-hash of https://github.com/NixOS/nixpkgs, e.g. https://github.com/NixOS/nixpkgs/archive/472fc059560306eeea6834d5923930f1c3968724.tar.gz
    asBuildInput: true
    keep:
      - "bin/deno"

- (integrate):
    package: [ "nix",]
    asBuildInput: true

- (integrate):
    package: [ "zsh",]
    asBuildInput: true

- (integrate):
    package: [ "openocd",]
    asBuildInput: true

- (integrate):
    package: [ "gcc-arm-embedded",]
    asBuildInput: true

- (integrate):
    package: [ "gcc",]
    asBuildInput: true

- (integrate):
    package: [ "pkgsCross", "armv7l-hf-multiplatform", "gcc",]
    asBuildInput: true

- (integrate):
    package: [ "python311"]
    asBuildInput: true

- (integrate):
    package: ["scons_3_1_2"]
    asBuildInput: true
    # from: !!var sconsWarehouse

- (integrate):
    package: [ "python311Packages", "pyelftools"]
    asBuildInput: true

- (integrate):
    package: [ "python311Packages", "pip"]
    asBuildInput: true

- (integrate):
    package: [ "python311Packages", "jinja2"]
    asBuildInput: true

- (integrate):
    package: [ "python311Packages", "virtualenv"]
    asBuildInput: true

# 
# example of including a linux-specific system package
# 

# - (integrate):
#     package: [ "pkgconfig",]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isLinux

# - (integrate):
#     package: [ "cmake",]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isLinux

# 
# example of including a mac-specific system package
# 

# - (integrate):
#     package: [ "xcbuild",]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isMac

# - (integrate):
#     package: [ "xcodebuild",]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isMac

# - (integrate):
#     package: [ "darwin", "libobjc", ]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isMac

# - (integrate):
#     package: [ "darwin", "apple_sdk", "frameworks", "CoreServices" ]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isMac

# - (integrate):
#     package: [ "darwin", "apple_sdk", "frameworks", "CoreFoundation" ]
#     asBuildInput: true
#     asNativeBuildInput: true
#     onlyIf: !!var isMac


#
#
# Some very basic commands you may want to comment in
#
#


# - (integrate):
#     package: [ "which",]
#     asBuildInput: true

# - (integrate):
#     package: [ "curl",]
#     asBuildInput: true

# - (integrate):
#     package: [ "less",]
#     asBuildInput: true

# - (integrate):
#     package: [ "man",]
#     asBuildInput: true

# - (integrate):
#     package: [ "coreutils",]
#     asBuildInput: true

# - (integrate):
#     package: [ "findutils",]
#     asBuildInput: true

# - (integrate):
#     package: [ "wget",]
#     asBuildInput: true
    
# - (integrate):
#     package: [ "nano",]
#     asBuildInput: true

# - (integrate):
#     package: [ "zip",]
#     asBuildInput: true

# - (integrate):
#     package: [ "unzip",]
#     asBuildInput: true

# - (integrate):
#     package: [ "git",]
#     asBuildInput: true

# - (integrate):
#     package: [ "openssh",]
#     asBuildInput: true

# - (integrate):
#     package: [ "colorls",]
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "ping",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true


# - (integrate):
#     package: [ "unixtools", "ifconfig",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "netstat",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "arp",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "route",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "col",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "column",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "fdisk",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "fsck",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "getconf",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "getent",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "getopt",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "hexdump",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "hostname",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "killall",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "locale",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "more",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "mount",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "ps",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "quota",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "script",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "sysctl",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "top",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "umount",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "whereis",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "write",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true

# - (integrate):
#     package: [ "unixtools", "xxd",]
#     from: !!var warehouseForNetworking
#     asBuildInput: true