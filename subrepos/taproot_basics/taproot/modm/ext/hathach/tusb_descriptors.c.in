/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Ha Thach (tinyusb.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

#include "tusb.h"

/* A combination of interfaces must have a unique product id, since PC will save
 * device driver after the first plug. Same VID/PID with different interface e.g
 * MSC (first), then CDC (later) will possibly cause system error on PC.
 *
 * Auto ProductID layout's Bitmap:
 *   [MSB]       MIDI | HID | MSC | CDC          [LSB]
 */
#define _PID_MAP(itf, n) ((CFG_TUD_##itf) << (n))
#define USB_PID                                                      \
	(0x4000 | _PID_MAP(CDC, 0) | _PID_MAP(MSC, 2) | _PID_MAP(HID, 3) | \
	_PID_MAP(MIDI, 4) | _PID_MAP(AUDIO, 5) | _PID_MAP(VENDOR, 6))

//--------------------------------------------------------------------+
// Device Descriptors
//--------------------------------------------------------------------+
const tusb_desc_device_t desc_device =
{
	.bLength            = sizeof(tusb_desc_device_t),
	.bDescriptorType    = TUSB_DESC_DEVICE,
	.bcdUSB             = 0x0200,

%% if with_cdc
	// Use Interface Association Descriptor (IAD) for CDC
	// As required by USB Specs IAD's subclass must be common class (2) and protocol must be IAD (1)
	.bDeviceClass       = TUSB_CLASS_MISC,
	.bDeviceSubClass    = MISC_SUBCLASS_COMMON,
	.bDeviceProtocol    = MISC_PROTOCOL_IAD,
%% else
	.bDeviceClass       = 0x00,
	.bDeviceSubClass    = 0x00,
	.bDeviceProtocol    = 0x00,
%% endif

	.bMaxPacketSize0    = CFG_TUD_ENDPOINT0_SIZE,

	.idVendor           = 0xCafe,
	.idProduct          = USB_PID,
	.bcdDevice          = 0x0100,

	.iManufacturer      = 0x01,
	.iProduct           = 0x02,
	.iSerialNumber      = 0x03,

	.bNumConfigurations = 0x01
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
modm_weak const uint8_t*
tud_descriptor_device_cb(void)
{
	return (uint8_t const *) &desc_device;
}

//--------------------------------------------------------------------+
// Configuration Descriptor
//--------------------------------------------------------------------+
enum
{
%% for itf in itfs_enum
	ITF_NUM_{{itf}}{% if loop.first %} = 0{% endif %},
%% endfor
	ITF_NUM_TOTAL
};

#define CONFIG_TOTAL_LEN (TUD_CONFIG_DESC_LEN + \
	CFG_TUD_CDC         * TUD_CDC_DESC_LEN + \
	CFG_TUD_MSC         * TUD_MSC_DESC_LEN + \
	CFG_TUD_HID         * TUD_HID_DESC_LEN + \
	CFG_TUD_MIDI        * TUD_MIDI_DESC_LEN + \
	CFG_TUD_DFU_RUNTIME * TUD_DFU_RT_DESC_LEN + \
	CFG_TUD_VENDOR      * TUD_VENDOR_DESC_LEN)

%% for endpoint, value in endpoints.items()
#define EPNUM_{{ endpoint }} {{ value }}
%% endfor

%% macro itf_descr(hs)
%% set ep_size = 512 if hs else 64
const uint8_t desc_{{"hs" if hs else "fs"}}_configuration[] =
{
	// Config number, interface count, string index, total length, attribute, power in mA
	TUD_CONFIG_DESCRIPTOR(1, ITF_NUM_TOTAL, 0, CONFIG_TOTAL_LEN, TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP, 100),

%% for (itf_class, itf) in itfs
	%% if itf_class in ["CDC"]
	// {{loop.index}}st CDC: Interface number, string index, EP notification address and size, EP data address (out, in) and size.
	TUD_CDC_DESCRIPTOR(ITF_NUM_{{itf}}, {{loop.index0+4}}, EPNUM_{{itf}}_NOTIF, 8, EPNUM_{{itf}}_OUT, EPNUM_{{itf}}_IN, {{ep_size}}),
	%% elif itf_class in ["MSC", "MIDI", "VENDOR"]
	// {{loop.index}}st {{itf_class}}: Interface number, string index, EP Out & EP In address, EP size
	TUD_{{itf_class}}_DESCRIPTOR(ITF_NUM_{{itf}}, {{loop.index0+4}}, EPNUM_{{itf}}_OUT, EPNUM_{{itf}}_IN, {{ep_size}}),
	%% elif itf_class in ["DFU_RT"]
	// Interface number, string index, attributes, detach timeout, transfer size */
	TUD_DFU_RT_DESCRIPTOR(ITF_NUM_{{itf}}, {{loop.index0+4}}, 0x0d, 1000, 4096),
	%% endif
%% endfor
};
%% endmacro

{{ itf_descr(False) }}

%% if 1 in ports
{{ itf_descr(True) }}
%% endif

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
modm_weak const uint8_t*
tud_descriptor_configuration_cb(uint8_t index)
{
	(void)index;  // for multiple configurations
%% if 1 in ports
	// Although we are highspeed, host may be fullspeed.
	return (tud_speed_get() == TUSB_SPEED_HIGH) ? desc_hs_configuration : desc_fs_configuration;
%% else
	return desc_fs_configuration;
%% endif
}

%% if 1 in ports

// device qualifier is mostly similar to device descriptor since we don't change configuration based on speed
const tusb_desc_device_qualifier_t desc_device_qualifier =
{
	.bLength            = sizeof(tusb_desc_device_qualifier_t),
	.bDescriptorType    = TUSB_DESC_DEVICE_QUALIFIER,
	.bcdUSB             = 0x200,

%% if with_cdc
	// Use Interface Association Descriptor (IAD) for CDC
	// As required by USB Specs IAD's subclass must be common class (2) and protocol must be IAD (1)
	.bDeviceClass       = TUSB_CLASS_MISC,
	.bDeviceSubClass    = MISC_SUBCLASS_COMMON,
	.bDeviceProtocol    = MISC_PROTOCOL_IAD,
%% else
	.bDeviceClass       = 0x00,
	.bDeviceSubClass    = 0x00,
	.bDeviceProtocol    = 0x00,
%% endif

	.bMaxPacketSize0    = CFG_TUD_ENDPOINT0_SIZE,
	.bNumConfigurations = 0x01,
	.bReserved          = 0x00
};

// Invoked when received GET DEVICE QUALIFIER DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete.
// device_qualifier descriptor describes information about a high-speed capable device that would
// change if the device were operating at the other speed. If not highspeed capable stall this request.
modm_weak const uint8_t *
tud_descriptor_device_qualifier_cb(void)
{
	return (uint8_t const *) &desc_device_qualifier;
}

static uint8_t desc_other_speed_config[CONFIG_TOTAL_LEN];
modm_weak const uint8_t *
tud_descriptor_other_speed_configuration_cb(uint8_t index)
{
	// if link speed is high return fullspeed config, and vice versa
	// Note: the descriptor type is OHER_SPEED_CONFIG instead of CONFIG
	memcpy(desc_other_speed_config, tud_descriptor_configuration_cb(index), CONFIG_TOTAL_LEN);
	desc_other_speed_config[1] = TUSB_DESC_OTHER_SPEED_CONFIG;
	return desc_other_speed_config;
}

%% endif
//
//--------------------------------------------------------------------+
// String Descriptors
//--------------------------------------------------------------------+

// array of pointer to string descriptors
modm_weak const char*
tud_string_desc_arr[] =
{
	NULL,				// 0: Language
	"TinyUSB",			// 1: Manufacturer
	"TinyUSB Device",	// 2: Product
	NULL,				// 3: Serials, should use chip ID
%% for (_, itf) in itfs
	"TinyUSB {{itf}}",		// {{loop.index0 + 4}}: {{itf}} Interface
%% endfor
};

static uint16_t _desc_str[33];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long
// enough for transfer to complete
modm_weak const uint16_t*
tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
	(void)langid;
	uint8_t chr_count = 1;

	if (index == 0)
	{	// supported language is English (0x0409)
		_desc_str[1] = 0x09; _desc_str[2] = 0x04;
	}
	else if (index == 3)
	{
		extern uint8_t tusb_get_device_serial(uint16_t* serial_str);
		chr_count = tusb_get_device_serial(_desc_str + 1);
	}
	else
	{
		if (!(index < sizeof(tud_string_desc_arr) / sizeof(tud_string_desc_arr[0])))
			return NULL;

		const char* str = tud_string_desc_arr[index];

		// Cap at max char
		chr_count = strlen(str);
		if (chr_count > 31) chr_count = 31;

		// Convert ASCII string into UTF-16
		for (uint8_t i = 0; i < chr_count; i++)
			_desc_str[1 + i] = str[i];
	}

	// first byte is length (including header), second byte is string type
	_desc_str[0] = (TUSB_DESC_STRING << 8) | (2 * chr_count + 2);

	return _desc_str;
}
