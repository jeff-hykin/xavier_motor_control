name: Generate

on:
  schedule:
    - cron:  '23 7 * * *'
  pull_request:
  workflow_dispatch:

env:
  MAKEFLAGS: -j4

jobs:
  group-1:
    name: "STM32: F4, G4, L0, H5"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lxml jinja2 deepdiff CppHeaderParser
      - name: Generate STM32 data
        run: |
          cd tools/generator
          make generate-stm32f4 generate-stm32g4 generate-stm32l0 generate-stm32h5
      - name: Synchronize Docs
        run: |
          python3 tools/scripts/sync_docs.py
          git diff -- README.md
          git status --porcelain
          git diff $(git diff --name-only | sed -n 1p)
          (( $(git status --porcelain | wc -l) == 0 ))

  group-2:
    name: "STM32: C0, G0, U0, H7, L4"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lxml jinja2 deepdiff CppHeaderParser
      - name: Generate STM32 data
        run: |
          cd tools/generator
          make generate-stm32c0 generate-stm32g0 generate-stm32u0 generate-stm32h7 generate-stm32l4
      - name: Synchronize Docs
        run: |
          python3 tools/scripts/sync_docs.py
          git diff -- README.md
          git status --porcelain
          git diff $(git diff --name-only | sed -n 1p)
          (( $(git status --porcelain | wc -l) == 0 ))

  group-3:
    name: "STM32: F0, F1, F2, F3, F7, L1, L5, WB, WL, U5"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lxml jinja2 deepdiff CppHeaderParser
      - name: Generate STM32 data
        run: |
          cd tools/generator
          make generate-stm32f0 generate-stm32f1 generate-stm32f2 generate-stm32f3 \
               generate-stm32f7 generate-stm32l1 generate-stm32wb generate-stm32wl \
               generate-stm32u5 generate-stm32l5
      - name: Synchronize Docs
        run: |
          python3 tools/scripts/sync_docs.py
          git diff -- README.md
          git status --porcelain
          git diff $(git diff --name-only | sed -n 1p)
          (( $(git status --porcelain | wc -l) == 0 ))

  group-4:
    name: "AVR, SAM, NRF, RP"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install lxml jinja2 deepdiff CppHeaderParser packaging
      - name: Run Unit Tests
        run: |
          make test
      - name: Generate AVR data
        if: always()
        run: |
          cd tools/generator
          make generate-avr
      - name: Generate SAM data
        if: always()
        run: |
          cd tools/generator
          make generate-sam
      - name: Generate NRF data
        if: always()
        run: |
          cd tools/generator
          make generate-nrf
      - name: Generate RP data
        if: always()
        run: |
          cd tools/generator
          make generate-rp
      - name: Synchronize Docs
        run: |
          python3 tools/scripts/sync_docs.py
          git diff -- README.md
          git status --porcelain
          git diff $(git diff --name-only | sed -n 1p)
          (( $(git status --porcelain | wc -l) == 0 ))

  keep-alive:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - name: Re-enable workflow
        env:
          GITHUB_TOKEN: ${{ github.token }}
        shell: sh
        run: |
          case "${GITHUB_WORKFLOW_REF:?}" in
            "${GITHUB_REPOSITORY:?}"/.github/workflows/*.y*ml@*) ;;
            *) false ;;
          esac
          workflow="${GITHUB_WORKFLOW_REF%%@*}"
          workflow="${workflow#${GITHUB_REPOSITORY}/.github/workflows/}"
          gh api -X PUT "repos/${GITHUB_REPOSITORY}/actions/workflows/${workflow}/enable"

