/*
 * Copyright (c) 2020, Erik Henriksson
 * Copyright (c) 2021, 2023, Niklas Hauser
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#include "context.h"
#include <modm/architecture/detect.hpp>

/* Stack layout (growing downwards):
 *
 * Permanent Storage:
 * Fiber Function
 * Fiber Function Argument
 *
 * Temporary Prepare:
 * Entry Function
 *
 * Register file:
 *
 * fc_mxcsr | fc_x87_cw
 * SEE registers XMM6-XMM15 (for windows)
 * rbp
 * rbx
 * rsi (for windows)
 * rdi (for windows)
 * r15
 * r14
 * r13
 * r12
 */

namespace
{

constexpr size_t StackWordsReset = 1;
constexpr size_t StackWordsStorage = 2;
constexpr size_t StackWordsRegisters = 30;
constexpr size_t StackWordsAll = StackWordsStorage + StackWordsRegisters;
constexpr size_t StackSizeWord = sizeof(uintptr_t);
constexpr uintptr_t StackWatermark = 0xc0ffee'f00d'facade;


void modm_naked
modm_context_entry()
{
	asm volatile
	(
%% if is_windows
		"mov  (%rsp), %rcx	\n\t" // Load argument pointer
		"mov 8(%rsp), %rdx	\n\t" // Load function pointer
		"jmp  *%rdx			\n\t" // Jump into function
%% else
		"mov  (%rsp), %rdi	\n\t" // Load argument pointer
		"mov 8(%rsp), %rsi	\n\t" // Load function pointer
		"jmp  *%rsi			\n\t" // Jump into function
%% endif
	);
}

}

void
modm_context_init(modm_context_t *ctx,
				  uintptr_t *bottom, uintptr_t *top,
				  uintptr_t fn, uintptr_t fn_arg)
{
	ctx->bottom = bottom;
	ctx->top = top;

	ctx->sp = top;
	*--ctx->sp = fn;
	*--ctx->sp = fn_arg;
}

void
modm_context_reset(modm_context_t *ctx)
{
	*ctx->bottom = StackWatermark;

	ctx->sp = ctx->top - StackWordsStorage;
	*--ctx->sp = (uintptr_t) modm_context_entry;
	ctx->sp -= StackWordsRegisters - StackWordsReset;
	// initialize stack with the right flags
	asm volatile
	(
		"stmxcsr 0xa0(%0)	\n\t"
		"fnstcw  0xa4(%0)	\n\t"
		:: "r" (ctx->sp)
	);
}

void
modm_context_watermark(modm_context_t *ctx)
{
	// clear the register file on the stack
	for (auto *word = ctx->top - StackWordsAll;
		 word < ctx->top - StackWordsStorage - StackWordsReset; word++)
		*word = 0;

	// then color the whole stack *below* the register file
	for (auto *word = ctx->bottom; word < ctx->top - StackWordsAll; word++)
		*word = StackWatermark;
}

size_t
modm_context_stack_usage(const modm_context_t *ctx)
{
	for (auto *word = ctx->bottom; word < ctx->top; word++)
		if (StackWatermark != *word)
			return (ctx->top - word) * StackSizeWord;
	return 0;
}

bool
modm_context_stack_overflow(const modm_context_t *ctx)
{
	return *ctx->bottom != StackWatermark;
}

static modm_context_t main_context;

void
modm_context_start(modm_context_t *to)
{
	modm_context_jump(&main_context, to);
}

void
modm_context_end()
{
	modm_context_t dummy;
	modm_context_jump(&dummy, &main_context);
	__builtin_unreachable();
}

/*
The assembly code below is adapted from the Boost Context library to work
for Windows, Linux and macOS.
See https://github.com/boostorg/context/tree/develop/src/asm
- Windows: jump_x86_64_ms_pe_clang_gas.S
- Linux: jump_x86_64_sysv_elf_gas.S
- macOS: jump_x86_64_sysv_macho_gas.S

			Copyright Oliver Kowalke 2009.
   Distributed under the Boost Software License, Version 1.0.
	  (See accompanying file LICENSE_1_0.txt or copy at
			http://www.boost.org/LICENSE_1_0.txt)
*/

void modm_naked
modm_context_jump(modm_context_t*, modm_context_t*)
{
	asm volatile
	(
		"leaq -0xe8(%rsp), %rsp		\n\t"	// move stack pointer down
%#
%% if is_windows
		// save XMM storage
		"movups %xmm6,  0x00(%rsp)	\n\t"
		"movups %xmm7,  0x10(%rsp)	\n\t"
		"movups %xmm8,  0x20(%rsp)	\n\t"
		"movups %xmm9,  0x30(%rsp)	\n\t"
		"movups %xmm10, 0x40(%rsp)	\n\t"
		"movups %xmm11, 0x50(%rsp)	\n\t"
		"movups %xmm12, 0x60(%rsp)	\n\t"
		"movups %xmm13, 0x70(%rsp)	\n\t"
		"movups %xmm14, 0x80(%rsp)	\n\t"
		"movups %xmm15, 0x90(%rsp)	\n\t"
%#
%% endif
		"stmxcsr 0xa0(%rsp)			\n\t"	// save MMX control- and status-word
		"fnstcw  0xa4(%rsp)			\n\t"	// save x87 control-word

		"movq %r12, 0xa8(%rsp)		\n\t"	// save R12
		"movq %r13, 0xb0(%rsp)		\n\t"	// save R13
		"movq %r14, 0xb8(%rsp)		\n\t"	// save R14
		"movq %r15, 0xc0(%rsp)		\n\t"	// save R15
%% if is_windows
		"movq %rdi, 0xc8(%rsp)		\n\t"	// save RDI
		"movq %rsi, 0xd0(%rsp)		\n\t"	// save RSI
%% endif
		"movq %rbx, 0xd8(%rsp)		\n\t"	// save RBX
		"movq %rbp, 0xe0(%rsp)		\n\t"	// save RBP
%#
%% if is_windows
		"movq %rsp, (%rcx)			\n\t"	// Store the SP in "from"
		"movq (%rdx), %rsp			\n\t"	// Restore SP from "to"
%% else
		"movq %rsp, (%rdi)			\n\t"	// Store the SP in "from"
		"movq (%rsi), %rsp			\n\t"	// Restore SP from "to"
%% endif
%% if is_windows
%#
		// restore XMM storage
		"movups 0x00(%rsp), %xmm6	\n\t"
		"movups 0x10(%rsp), %xmm7	\n\t"
		"movups 0x20(%rsp), %xmm8	\n\t"
		"movups 0x30(%rsp), %xmm9	\n\t"
		"movups 0x40(%rsp), %xmm10	\n\t"
		"movups 0x50(%rsp), %xmm11	\n\t"
		"movups 0x60(%rsp), %xmm12	\n\t"
		"movups 0x70(%rsp), %xmm13	\n\t"
		"movups 0x80(%rsp), %xmm14	\n\t"
		"movups 0x90(%rsp), %xmm15	\n\t"
%% endif
%#
		"ldmxcsr 0xa0(%rsp)			\n\t"	// restore MMX control- and status-word
		"fldcw   0xa4(%rsp)			\n\t"	// restore x87 control-word

		"movq 0xa8(%rsp),  %r12		\n\t"	// restore R12
		"movq 0xb0(%rsp),  %r13		\n\t"	// restore R13
		"movq 0xb8(%rsp),  %r14		\n\t"	// restore R14
		"movq 0xc0(%rsp),  %r15		\n\t"	// restore R15
%% if is_windows
		"movq 0xc8(%rsp),  %rdi		\n\t"	// restore RDI
		"movq 0xd0(%rsp),  %rsi		\n\t"	// restore RSI
%% endif
		"movq 0xd8(%rsp), %rbx		\n\t"	// restore RBX
		"movq 0xe0(%rsp), %rbp		\n\t"	// restore RBP

		"leaq 0xe8(%rsp), %rsp		\n\t"	// move stack pointer up

		"ret						\n\t"	// Perform the jump back
	);
}
