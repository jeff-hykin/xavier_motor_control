/*
 * Copyright (c) 2021, Jeff McBride
 * Copyright (c) 2022, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
#pragma once

#include <modm/architecture/interface/adc.hpp>
#include <modm/architecture/interface/register.hpp>
#include <modm/math/algorithm/prescaler.hpp>
#include <modm/platform/clock/clockgen.hpp>
#include <modm/platform/gpio/connector.hpp>

%% if type == "afec"
%% set reg = "AFEC"
%% else
%% set reg = "ADC"
%% endif

namespace modm::platform
{

/// @ingroup modm_platform_adc
class {{type | capitalize}}{{instance}} : modm::Adc
{
	static const modm::frequency_t MaxAdcFrequency = modm::MHz({{max_frequency}});

	// Work around a name collision between 'struct modm::Adc' and 'struct Adc'
	// defined in the CMSIS headers
	static inline auto*
	Regs()
	{
		return (::{{type | capitalize}}*){{reg}}{{instance}};
	};

public:
	enum class Channel : uint8_t
	{
%% for i in range(channel_count)
		Ch{{i}} = {{i}}{% if not loop.last %},{% endif %}
%% endfor
	};

%% if target.family != "e7x/s7x/v7x"
	/** Analog settling time setting
	 *
	 * Controls how many periods of ADC clock are allowed for input to settle.
	 */
	enum class SettlingTime : uint8_t
	{
		AST3 = 0,
		AST5,
		AST9,
		AST17
	};
%% endif

%% if target.family == "e7x/s7x/v7x"
	enum class Resolution : uint32_t
	{
		Full_12Bit = AFEC_EMR_RES(0),
		Low_10Bit = AFEC_EMR_RES(1),
		Average4_13Bit = AFEC_EMR_RES(2),
		Average16_14Bit = AFEC_EMR_RES(3),
		Average64_15Bit = AFEC_EMR_RES(4),
		Average256_16Bit = AFEC_EMR_RES(5)
	};

	enum class Trigger
	{
		Adtrg = AFEC_MR_TRGSEL_AFEC_TRIG0,
%% if instance == "0"
		Tc0Tioa = AFEC_MR_TRGSEL_AFEC_TRIG1,
		Tc1Tioa = AFEC_MR_TRGSEL_AFEC_TRIG2,
		Tc2Tioa = AFEC_MR_TRGSEL_AFEC_TRIG3,
		Pwm0Event0 = AFEC_MR_TRGSEL_AFEC_TRIG4,
		Pwm0Event1 = AFEC_MR_TRGSEL_AFEC_TRIG5,
%% elif instance == "1"
		Tc3Tioa = AFEC_MR_TRGSEL_AFEC_TRIG1,
		Tc4Tioa = AFEC_MR_TRGSEL_AFEC_TRIG2,
		Tc5Tioa = AFEC_MR_TRGSEL_AFEC_TRIG3,
		Pwm1Event0 = AFEC_MR_TRGSEL_AFEC_TRIG4,
		Pwm1Event1 = AFEC_MR_TRGSEL_AFEC_TRIG5,
%% endif
		AnalogComparator = AFEC_MR_TRGSEL_AFEC_TRIG6
	};

	/// AFEC interrupt flags
	enum class Interrupt : uint32_t
	{
		Ch0EndOfConversion = Bit0,
		Ch1EndOfConversion = Bit1,
		Ch2EndOfConversion = Bit2,
		Ch3EndOfConversion = Bit3,
		Ch4EndOfConversion = Bit4,
		Ch5EndOfConversion = Bit5,
		Ch6EndOfConversion = Bit6,
		Ch7EndOfConversion = Bit7,
		Ch8EndOfConversion = Bit8,
		Ch9EndOfConversion = Bit9,
		Ch10EndOfConversion = Bit10,
		Ch11EndOfConversion = Bit11,

		DataReady = Bit24,
		Overrun = Bit25,
		ComparisonError = Bit26
	};

	MODM_FLAGS32(Interrupt);
%% endif

public:
	template<class Pin, class... Pins>
	static inline void
	connect()
	{
		// Pins are automatically connected to the ADC when they are enabled,
		// so all this does is set the pin mode to input.
%% if instance
%% set peripheral = type.capitalize() + "<" + instance + ">"
%% else
%% set peripheral = type.capitalize()
%% endif
		using Connector = typename Pin::template Connector<Peripherals::{{peripheral}}, Peripherals::{{peripheral}}::Ad>;
		static_assert(Connector::PinSignal::AdcChannel >= 0, "Pin cannot be used as ADC input");
		Pin::setInput();

		// Call recursively for all Pins
		if constexpr (sizeof...(Pins)) { connect<Pins...>(); }
	}

	template<class SystemClock, frequency_t frequency = MHz({{max_frequency}}), percent_t tolerance = pct(10)>
	static inline void
	initialize()
	{
		constexpr auto result = modm::Prescaler::from_function(
			SystemClock::Frequency,                 // input frequency
			frequency,                              // desired adc frequency
			0,                                      // lowest prescaler value
			255,                                    // highest prescaler value
%% if target.family == "e7x/s7x/v7x"
			[](uint32_t x) { return (x + 1); }      // transform function
%% else
			[](uint32_t x) { return 2 * (x + 1); }  // transform function
%% endif
		);
		static_assert(result.frequency <= MaxAdcFrequency,
					  "Generated ADC frequency is above maximum frequency!");
		assertBaudrateInTolerance<result.frequency, frequency, tolerance>();

		ClockGen::enable<ClockPeripheral::{{type | capitalize}}{{instance}}>();

		Regs()->{{reg}}_MR =
			{{reg}}_MR_PRESCAL(result.index) |
%% if target.family == "e7x/s7x/v7x"
			// 2: recommended value according to datasheet
			{{reg}}_MR_TRANSFER(2) |
			// The datasheet states TRACKTIM should be set to 15 AFE clock cycles.
			// According to app note 44046 this is achieved with a value of 14.
			// If the datasheets guidance is followed to not change this value the
			// ADC reads wrong values half of the time.
			// Also, none of the 3 vendor HALs use the reset value of 0.
			{{reg}}_MR_TRACKTIM(14) |
			{{reg}}_MR_ONE; // reserved, must always be set

		// Require only a single trigger for oversampled conversions
		Regs()->{{reg}}_EMR = {{reg}}_EMR_STM;
%% else
			{{reg}}_MR_TRANSFER(2);
%% endif

%% if target.family == "e7x/s7x/v7x"
		// Enable PGAs and set up biasing
		Regs()->{{reg}}_ACR = {{reg}}_ACR_PGA1EN | {{reg}}_ACR_PGA0EN |
			AFEC_ACR_IBCTL((result.frequency >= MHz(20) ? 0b11 : 0b10));

		// set 10-bit offset DACs to zero offset (value 512, mid scale)
		for (int channel = 0; channel < {{channel_count}}; ++channel) {
			Regs()->{{reg}}_CSELR = channel; // select channel of COCR register
			Regs()->{{reg}}_COCR = 512;
		}
%% endif
	}

	/**
	 * Software trigger to start conversion.
	 * @warn Has no effect if hardware triggers or free-running mode are enabled.
	 */
	static inline void
	startConversion()
	{
		Regs()->{{reg}}_CR = {{reg}}_CR_START;
	}

	static inline bool
	isConversionFinished()
	{
		return Regs()->{{reg}}_ISR & {{reg}}_ISR_DRDY;
	}

	/// Read value of the last conversion
	static inline uint16_t
	getValue()
	{
		return (uint16_t)(Regs()->{{reg}}_LCDR & 0xffff);
	}

%% if target.family == "e7x/s7x/v7x"
	/**
	 * Read last valid conversion result of channel
	 * Clears the channel end of conversion status flag
	 * @warning Data is only valid when the corresponding channel is enabled
	 */
	static inline uint16_t
	getChannelValue(Channel channel)
	{
		Regs()->{{reg}}_CSELR = static_cast<uint8_t>(channel);
		return Regs()->{{reg}}_CDR;
	}

	/**
	 * Read last valid conversion result of channel of pin
	 * Clears the channel end of conversion status flag
	 * @warning Data is only valid when the corresponding channel is enabled
	 */
	template<typename Pin>
	static uint16_t
	getChannelValue()
	{
		return getChannelValue(static_cast<Channel>(getPinChannel<Pin>()));
	}

	/**
	 * Read interrupt status flags
	 * DataReady, Overrun and ComparisonError flags are cleared.
	 */
	static inline Interrupt_t
	readInterruptStatus()
	{
		return Interrupt_t{Regs()->{{reg}}_ISR};
	}
%% endif

	static inline uint16_t
	readChannel(uint8_t channel)
	{
		if (!setChannel(channel)) return 0;

		// clear data ready by reading last value register
		getValue();
		startConversion();
		while (!isConversionFinished()) {}

		return getValue();
	}

	static inline bool
	setChannel(Channel channel)
	{
		return setChannel((uint8_t)channel);
	}

	static inline bool
	setChannel(uint8_t channel)
	{
		if (channel >= {{channel_count}}) return false;
		Regs()->{{reg}}_CHDR = (1u << {{channel_count}}) - 1u;
		Regs()->{{reg}}_CHER = (1u << channel);
		return true;
	}

	/**
	 * Enable multi-channel conversion sequence.
	 * Conversion order is sequential by channel number, not as specified by the arguments.
	 * @arg channels Up to 12 channels of type @ref Channel
	 */
	template<typename... Cs>
	static inline void
	setChannels(Cs... channels)
	{
		static_assert((std::is_same_v<Cs, Channel> && ...));
		static_assert(sizeof...(Cs) <= {{channel_count}});
		Regs()->{{reg}}_CHDR = (1u << {{channel_count}}) - 1u;
		Regs()->{{reg}}_CHER = ((1u << static_cast<uint8_t>(channels)) | ...);
	}

	template<typename Pin>
	static inline void
	setPinChannel()
	{
		setChannel(getPinChannel<Pin>());
	}

	/**
	 * Enable multi-channel conversion sequence.
	 * Conversion order is sequential by channel number, not as specified by the arguments.
	 * @tparam Pins ADC channel pins
	 */
	template<typename... Pins>
	static inline void
	setPinChannels()
	{
		setChannels(static_cast<Channel>(getPinChannel<Pins>())...);
	}

	static inline void
	enableFreeRunningMode()
	{
		Regs()->{{reg}}_MR |= {{reg}}_MR_FREERUN;
	}

	static inline void
	disableFreeRunningMode()
	{
		Regs()->{{reg}}_MR &= ~{{reg}}_MR_FREERUN;
	}

%% if target.family != "e7x/s7x/v7x"
	/** Configure the amount of time the ADC input is allowed to settle before sampling
	 */
	static inline void
	setSettlingTime(SettlingTime time)
	{
		Regs()->{{reg}}_MR = (Regs()->{{reg}}_MR & ~{{reg}}_MR_SETTLING_Msk) | {{reg}}_MR_SETTLING((uint8_t)time);
	}
%% endif

%% if target.family == "e7x/s7x/v7x"
	static inline void
	setResolution(Resolution r)
	{
		Regs()->{{reg}}_EMR = (Regs()->{{reg}}_EMR & ~{{reg}}_EMR_RES_Msk) | static_cast<uint32_t>(r);
	}

	/**
	 * Configure and enable hardware triggering.
	 * @warn Triggers are ignored if free-running mode is active.
	 */
	static inline void
	enableHardwareTrigger(Trigger trigger)
	{
		Regs()->{{reg}}_MR &= ~({{reg}}_MR_TRGEN | AFEC_MR_TRGSEL_Msk);
		Regs()->{{reg}}_MR |= {{reg}}_MR_TRGEN | static_cast<uint32_t>(trigger);
	}

	static inline void
	disableHardwareTrigger()
	{
		Regs()->{{reg}}_MR &= ~{{reg}}_MR_TRGEN;
	}
%% endif

	/// Get data register pointer for use with DMA
	static const volatile uint32_t*
	dataRegister()
	{
		return &Regs()->{{reg}}_LCDR;
	}

	template<class Pin>
	static inline constexpr uint8_t
	getPinChannel()
	{
		using Connector = typename Pin::Ad::template Connector<Peripherals::{{peripheral}}, Peripherals::{{peripheral}}::Ad>;

		static_assert(Connector::PinSignal::AdcChannel >= 0, "Pin cannot be used as ADC input");
		static_assert(Connector::PinSignal::AdcChannel < {{channel_count}});
		return Connector::PinSignal::AdcChannel;
	}
};

}  // namespace modm::platform
