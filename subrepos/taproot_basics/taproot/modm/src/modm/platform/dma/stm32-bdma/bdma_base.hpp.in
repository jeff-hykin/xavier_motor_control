/*
 * Copyright (c) 2014, Kevin LÃ¤ufer
 * Copyright (c) 2014-2017, Niklas Hauser
 * Copyright (c) 2020, Mike Wolfram
 * Copyright (c) 2021, Raphael Lehmann
 * Copyright (c) 2021-2023, Christopher Durand
 *
 * This file is part of the modm project.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
// ----------------------------------------------------------------------------

#ifndef MODM_STM32_BDMA_BASE_HPP
#define MODM_STM32_BDMA_BASE_HPP

#include <cstdint>
#include <cstddef>

#include "../device.hpp"

#include <modm/architecture/interface/interrupt.hpp>
#include <modm/architecture/interface/register.hpp>

namespace modm::platform
{

%% set reg_prefix = "BDMA_CCR"

/**
 * Common BDMA definitions
 *
 * @ingroup	modm_platform_dma
 */
class BdmaBase
{
public:
	enum class
	Channel
	{
	%% for channel in range(0, channel_count)
		Channel{{ channel }}{% if loop.first %} = 0{% endif %},
	%% endfor
	};

	%% set request_count = namespace(max_requests = 0)
	%% for request in dma["requests"][0]["request"]
		%% if request_count.max_requests < request.position | int
			%% set request_count.max_requests = request.position | int
		%% endif
	%% endfor

	enum class
	Request
	{
		None = 0,
	%% for request in range(1, request_count.max_requests + 1)
		Request{{ request }},
	%% endfor
	};

	enum class
	Priority : uint32_t
	{
		Low 		= 0,
		Medium  	= {{ reg_prefix }}_PL_0,
		High 		= {{ reg_prefix }}_PL_1,
		VeryHigh 	= {{ reg_prefix }}_PL_1 | {{ reg_prefix }}_PL_0,
	};

	enum class
	MemoryDataSize : uint32_t
	{
		Byte 		= 0,
		Bit8 		= Byte,
		HalfWord 	= {{ reg_prefix }}_MSIZE_0,
		Bit16 		= HalfWord,
		Word 		= {{ reg_prefix }}_MSIZE_1,
		Bit32 		= Word,
	};

	enum class
	PeripheralDataSize : uint32_t
	{
		Byte 		= 0,
		Bit8 		= Byte,
		HalfWord 	= {{ reg_prefix }}_PSIZE_0,
		Bit16 		= HalfWord,
		Word 		= {{ reg_prefix }}_PSIZE_1,
		Bit32 		= Word,
	};

	enum class
	MemoryIncrementMode : uint32_t
	{
		Fixed 		= 0,
		Increment 	= {{ reg_prefix }}_MINC, ///< incremented according to MemoryDataSize
	};

	enum class
	PeripheralIncrementMode : uint32_t
	{
		Fixed 		= 0,
		Increment 	= {{ reg_prefix }}_PINC, ///< incremented according to PeripheralDataSize
	};

	enum class
	CircularMode : uint32_t
	{
		Disabled 	= 0,
		Enabled 	= {{ reg_prefix }}_CIRC, ///< circular mode
	};

	enum class
	DataTransferDirection : uint32_t
	{
		/// Source: DMA_CPARx; Sink: DMA_CMARx
		PeripheralToMemory 	= 0,
		/// Source: DMA_CMARx; Sink: DMA_CPARx
		MemoryToPeripheral 	= {{ reg_prefix }}_DIR,
		/// Source: DMA_CPARx; Sink: DMA_CMARx
		MemoryToMemory 		= {{ reg_prefix }}_MEM2MEM,
	};

	/**
	 * Peripheral signals that can be used in DMA channels
	 */
	enum class
	Signal : uint8_t
	{
		NoSignal,
%% for signal in dma_signals
		{{ signal }},
%% endfor
	};

	enum class InterruptEnable : uint32_t
	{
		TransferComplete	= {{ reg_prefix }}_TCIE,
		HalfTransfer		= {{ reg_prefix }}_HTIE,
		TransferError		= {{ reg_prefix }}_TEIE,
	};
	MODM_FLAGS32(InterruptEnable);

	enum class InterruptFlags : uint8_t
	{
		Global = 0b0001,
		TransferComplete = 0b0010,
		HalfTransferComplete = 0b0100,
		Error = 0b1000,
		All = 0b1111,
	};
	MODM_FLAGS32(InterruptFlags);

	using IrqHandler = void (*)(void);
};

}	// namespace modm::platform

#endif	// MODM_STM32_BDMA_BASE_HPP
