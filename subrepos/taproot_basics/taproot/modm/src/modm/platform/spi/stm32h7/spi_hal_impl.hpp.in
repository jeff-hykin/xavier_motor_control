/*
* Copyright (c) 2013, Kevin LÃ¤ufer
* Copyright (c) 2013-2017, Niklas Hauser
* Copyright (c) 2014, Daniel Krebs
* Copyright (c) 2020, Mike Wolfram
* Copyright (c) 2023, Christopher Durand
*
* This file is part of the modm project.
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/
// ----------------------------------------------------------------------------

#ifndef MODM_STM32H7_SPI_HAL{{ id }}_HPP
#	error 	"Don't include this file directly, use 'spi_hal{{ id }}.hpp' instead!"
#endif
#include <modm/platform/clock/rcc.hpp>

namespace modm::platform
{

inline void
SpiHal{{ id }}::enableClock()
{
	Rcc::enable<Peripheral::Spi{{id}}>();
}

inline void
SpiHal{{ id }}::disableClock()
{
	Rcc::disable<Peripheral::Spi{{id}}>();
}

inline void
SpiHal{{ id }}::initialize(Prescaler prescaler,
		MasterSelection masterSelection, DataMode dataMode,
		DataOrder dataOrder, DataSize dataSize)
{
	enableClock();
	disableTransfer();

	acknowledgeInterruptFlags(
		StatusFlag::EndOfTransfer |
		StatusFlag::TxTransferFilled |
		StatusFlag::Underrun |
		StatusFlag::Overrun |
		StatusFlag::CrcError |
		StatusFlag::TiFrameError |
		StatusFlag::ModeFault |
		StatusFlag::Reload |
		StatusFlag::Suspension
	);

	// initialize with unlimited transfer size
	setTransferSize(0);

	// Pause master transfer if RX FIFO is full
	SPI{{ id }}->CR1 = SPI_CR1_MASRX;

	SPI{{ id }}->CFG2 = static_cast<uint32_t>(dataMode)
		| static_cast<uint32_t>(dataOrder)
		| static_cast<uint32_t>(masterSelection)
		| SPI_CFG2_SSOE; // disable multi-master support to prevent spurious mode fault

	SPI{{ id }}->CFG1 = static_cast<uint32_t>(prescaler)
		| static_cast<uint32_t>(dataSize);
}

inline void
SpiHal{{ id }}::setDataMode(DataMode dataMode)
{
	SPI{{ id }}->CFG2 = (SPI{{ id }}->CFG2 & ~static_cast<uint32_t>(DataMode::Mask))
										| static_cast<uint32_t>(dataMode);
}

inline void
SpiHal{{ id }}::setDataOrder(DataOrder dataOrder)
{
	SPI{{ id }}->CFG2 = (SPI{{ id }}->CFG2 & ~static_cast<uint32_t>(DataOrder::Mask))
										| static_cast<uint32_t>(dataOrder);
}

inline void
SpiHal{{ id }}::setDataSize(DataSize dataSize)
{
	SPI{{ id }}->CFG1 = (SPI{{ id }}->CFG1 & ~SPI_CFG1_DSIZE_Msk)
										| static_cast<uint32_t>(dataSize);
}

inline void
SpiHal{{ id }}::setMasterSelection(MasterSelection masterSelection)
{
	SPI{{ id }}->CFG2 = (SPI{{ id }}->CFG2 & ~static_cast<uint32_t>(MasterSelection::Mask))
										| static_cast<uint32_t>(masterSelection);
}

inline void
SpiHal{{ id }}::setDuplexMode(DuplexMode mode)
{
	SPI{{ id }}->CFG2 = (SPI{{ id }}->CFG2 & ~static_cast<uint32_t>(DuplexMode::Mask))
										| static_cast<uint32_t>(mode);
}

inline void
SpiHal{{ id }}::setCrcEnabled(bool enabled)
{
	if (enabled) {
		SPI{{ id }}->CFG1 |= SPI_CFG1_CRCEN;
	} else {
		SPI{{ id }}->CFG1 &= ~SPI_CFG1_CRCEN;
	}
}

inline void
SpiHal{{ id }}::setCrcSize(DataSize crcSize)
{
	if ((crcSize == DataSize::Bit16) or (crcSize == DataSize::Bit32)) {
		SPI{{ id }}->CR1 |= SPI_CR1_CRC33_17;
	} else {
		SPI{{ id }}->CR1 &= ~SPI_CR1_CRC33_17;
	}
	SPI{{ id }}->CFG1 = (SPI{{ id }}->CFG1 & ~SPI_CFG1_CRCSIZE_Msk)
										| (static_cast<uint32_t>(crcSize) << SPI_CFG1_CRCSIZE_Pos);
}

inline void
SpiHal{{ id }}::setCrcPolynomial(uint32_t poly)
{
	SPI{{ id }}->CRCPOLY = poly;
}

inline void
SpiHal{{ id }}::setCrcInitialValue(CrcInit init)
{
	SPI{{ id }}->CR1 = (SPI{{ id }}->CR1 & ~static_cast<uint32_t>(CrcInit::Mask)) |
		static_cast<uint32_t>(init);
}

inline void
SpiHal{{ id }}::setTransferSize(uint16_t size, uint16_t reload)
{
	static_assert(SPI_CR2_TSIZE_Pos == 0);
	SPI{{ id }}->CR2 = (reload << SPI_CR2_TSER_Pos) | size;
}

inline void
SpiHal{{ id }}::setDmaMode(DmaMode_t mode)
{
	SPI{{ id }}->CFG1 = (SPI{{ id }}->CFG1 & ~(DmaMode::Tx | DmaMode::Rx).value)
										| mode.value;
}

inline void
SpiHal{{ id }}::setSlaveSelectMode(SlaveSelectMode mode)
{
	SPI{{ id }}->CFG2 = (SPI{{ id }}->CFG2 & ~SPI_CFG2_SSM_Msk)
										| uint32_t(mode);
}

inline void
SpiHal{{ id }}::setSlaveSelectPolarity(SlaveSelectPolarity polarity)
{
	SPI{{ id }}->CFG2 = (SPI{{ id }}->CFG2 & ~SPI_CFG2_SSIOP_Msk)
										| uint32_t(polarity);
}

inline void
SpiHal{{ id }}::setSlaveSelectState(bool state)
{
	if (state) {
		SPI{{ id }}->CR1 |= SPI_CR1_SSI;
	} else  {
		SPI{{ id }}->CR1 &= ~SPI_CR1_SSI;
	}
}

inline void
SpiHal{{ id }}::write(uint8_t data)
{
	// Write with 8-bit access
	auto* const ptr = reinterpret_cast<__IO uint8_t*>(&SPI{{ id }}->TXDR);
	*ptr = data;
}

inline void
SpiHal{{ id }}::write16(uint16_t data)
{
	// Write with 16-bit access
	// SPI{{ id }}->TXDR is of type "volatile uint32_t".
	// [[gnu::may_alias]] is required to avoid undefined behaviour due to strict aliasing violations.
	auto* const [[gnu::may_alias]] ptr = reinterpret_cast<__IO uint16_t*>(&SPI{{ id }}->TXDR);
	*ptr = data;
}

inline void
SpiHal{{ id }}::write32(uint32_t data)
{
	SPI{{ id }}->TXDR = data;
}

inline uint8_t
SpiHal{{ id }}::read()
{
	// Read with 8-bit access
	return *reinterpret_cast<const __IO uint8_t*>(&SPI{{ id }}->RXDR);
}

inline uint16_t
SpiHal{{ id }}::read16()
{
	// Read with 16-bit access
	// SPI{{ id }}->RXDR is of type "const volatile uint32_t".
	// [[gnu::may_alias]] is required to avoid undefined behaviour due to strict aliasing violations.
	auto* const [[gnu::may_alias]] ptr = reinterpret_cast<const __IO uint16_t*>(&SPI{{ id }}->RXDR);
	return *ptr;
}

inline uint32_t
SpiHal{{ id }}::read32()
{
	return SPI{{ id }}->RXDR;
}

inline void
SpiHal{{ id }}::enableInterruptVector(bool enable, uint32_t priority)
{
	if (enable) {
		// Set priority for the interrupt vector
		NVIC_SetPriority(SPI{{ id }}_IRQn, priority);
		// register IRQ at the NVIC
		NVIC_EnableIRQ(SPI{{ id }}_IRQn);
	}
	else {
		NVIC_DisableIRQ(SPI{{ id }}_IRQn);
	}
}

inline void
SpiHal{{ id }}::enableInterrupt(Interrupt_t interrupt)
{
	SPI{{ id }}->IER |= interrupt.value;
}

inline void
SpiHal{{ id }}::disableInterrupt(Interrupt_t interrupt)
{
	SPI{{ id }}->IER &= ~interrupt.value;
}

inline void
SpiHal{{ id }}::acknowledgeInterruptFlags(StatusFlag_t flags)
{
	constexpr auto mask =
		SPI_IFCR_EOTC |
		SPI_IFCR_TXTFC |
		SPI_IFCR_UDRC |
		SPI_IFCR_OVRC |
		SPI_IFCR_CRCEC |
		SPI_IFCR_TIFREC |
		SPI_IFCR_MODFC |
		SPI_IFCR_TSERFC |
		SPI_IFCR_SUSPC;

	SPI{{ id }}->IFCR = flags.value & mask;
}

inline SpiHal{{ id }}::StatusFlag_t
SpiHal{{ id }}::status()
{
	return StatusFlag_t(SPI{{ id }}->SR);
}

inline bool
SpiHal{{ id }}::isTransferCompleted()
{
	return bool(status() & StatusFlag::EndOfTransfer);
}

inline bool
SpiHal{{ id }}::isTxCompleted()
{
	return bool(status() & StatusFlag::TxTransferComplete);
}

inline bool
SpiHal{{ id }}::isTxFifoFull()
{
	return !(status() & StatusFlag::TxPacketSpaceAvailable);
}

inline bool
SpiHal{{ id }}::isRxDataAvailable()
{
	return bool(status() & StatusFlag::RxPacketAvailable);
}

inline void
SpiHal{{ id }}::enableTransfer()
{
	SPI{{ id }}->CR1 |= SPI_CR1_SPE;
}

inline void
SpiHal{{ id }}::disableTransfer()
{
	SPI{{ id }}->CR1 &= ~SPI_CR1_SPE;
}

inline bool
SpiHal{{ id }}::isTransferEnabled()
{
	return (SPI{{ id }}->CR1 & SPI_CR1_SPE);
}

inline void
SpiHal{{ id }}::startMasterTransfer()
{
	SPI{{ id }}->CR1 |= SPI_CR1_CSTART;
}

inline void
SpiHal{{ id }}::suspendMasterTransfer()
{
	SPI{{ id }}->CR1 |= SPI_CR1_CSUSP;
}

inline uint32_t
SpiHal{{ id }}::transmitCrc()
{
	return SPI{{ id }}->TXCRC;
}

inline uint32_t
SpiHal{{ id }}::receiveCrc()
{
	return SPI{{ id }}->RXCRC;
}

inline volatile uint32_t*
SpiHal{{ id }}::transmitRegister()
{
	return &SPI{{ id }}->TXDR;
}

inline const volatile uint32_t*
SpiHal{{ id }}::receiveRegister()
{
	return &SPI{{ id }}->RXDR;
}

} // namespace modm::platform
